(setq make-backup-files nil)

(setq-default cursor-in-non-selected-windows nil)
(setq-default fill-column 80)
(setq-default indent-tabs-mode nil)
(setq-default linum-format "%3d ")
(setq-default scroll-bar-mode nil)
(setq-default split-width-threshold 120)
(setq-default tab-width 4)

(electric-indent-mode 1)
(set-cursor-color "#dc322f")
(set-fringe-mode 0)
(toggle-scroll-bar -1)
(tool-bar-mode -1)

(unless (display-graphic-p)
  (menu-bar-mode -1))

(global-set-key (kbd "C-c e d") 'dark-theme)
(global-set-key (kbd "C-c e l") 'light-theme)
(global-set-key (kbd "C-c e p") 'print-file-name)
(global-set-key (kbd "C-c e r") 'reload-emacs)
(global-set-key (kbd "C-c e t") 'toggle-theme)
(global-set-key (kbd "C-c h b") 'describe-bindings)
(global-set-key (kbd "C-c h c") 'describe-char)
(global-set-key (kbd "C-c h f") 'describe-face)
(global-set-key (kbd "C-c h k") 'describe-key)
(global-set-key (kbd "C-c h m") 'describe-mode)
(global-set-key (kbd "C-c h s") 'describe-symbol)
(global-set-key (kbd "C-c h u") 'describe-function)
(global-set-key (kbd "C-c h v") 'describe-variable)
(global-set-key (kbd "C-c i h") 'hl-line-mode)
(global-set-key (kbd "C-c i l") 'linum-mode)
(global-set-key (kbd "C-c i p") 'show-paren-mode)
(global-set-key (kbd "C-c i t") 'toggle-truncate-lines)
(global-set-key (kbd "C-c i v") 'visual-line-mode)
(global-set-key (kbd "C-c r c") 'comment-or-uncomment-region)
(global-set-key (kbd "C-c r r") 'indent-region)
(global-set-key (kbd "C-c r w") 'whitespace-cleanup)
(global-set-key (kbd "C-c w a") 'rotate-windows-anticlockwise)
(global-set-key (kbd "C-c w b") 'balance-windows)
(global-set-key (kbd "C-c w c") 'rotate-windows-clockwise)
(global-set-key (kbd "C-c w t") 'toggle-window-split)

(defun reload-emacs ()
  (interactive)
  (load-file "~/.emacs.d/init.el"))

(defun print-file-name ()
  "Show the full path file name in the minibuffer."
  (interactive)
  (message (buffer-file-name)))

(defun light-theme ()
  "Switch to light theme"
  (interactive)
  (customize-set-variable 'frame-background-mode 'light)
  (load-theme 'solarized t))

(defun dark-theme ()
  "Switch to dark theme"
  (interactive)
  (customize-set-variable 'frame-background-mode 'dark)
  (load-theme 'solarized t))

(defun toggle-theme ()
  "Toggle between light and dark theme"
  (interactive)
  (if (eq frame-background-mode 'dark)
      (light-theme)
    (dark-theme)))

(defun toggle-window-split ()
  "If the frame is split vertically, split it horizontally or vice versa. Assumes that the frame is only split into two."
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
             (next-win-buffer (window-buffer (next-window)))
             (this-win-edges (window-edges (selected-window)))
             (next-win-edges (window-edges (next-window)))
             (this-win-2nd (not (and (<= (car this-win-edges)
                                         (car next-win-edges))
                                     (<= (cadr this-win-edges)
                                         (cadr next-win-edges)))))
             (splitter
              (if (= (car this-win-edges)
                     (car (window-edges (next-window))))
                  'split-window-horizontally
                'split-window-vertically)))
        (delete-other-windows)
        (let ((first-win (selected-window)))
          (funcall splitter)
          (if this-win-2nd (other-window 1))
          (set-window-buffer (selected-window) this-win-buffer)
          (set-window-buffer (next-window) next-win-buffer)
          (select-window first-win)
          (if this-win-2nd (other-window 1))))))

(defun rotate-windows (arg)
  "Rotate windows"
  (interactive)
  (if (not (> (count-windows) 1))
      (message "You can't rotate a single window!")
    (let* ((rotate-times (prefix-numeric-value arg))
           (direction (if (or (< rotate-times 0) (equal arg '(4)))
                          'reverse 'identity)))
      (dotimes (_ (abs rotate-times))
        (dotimes (i (- (count-windows) 1))
          (let* ((w1 (elt (funcall direction (window-list)) i))
                 (w2 (elt (funcall direction (window-list)) (+ i 1)))
                 (b1 (window-buffer w1))
                 (b2 (window-buffer w2))
                 (s1 (window-start w1))
                 (s2 (window-start w2))
                 (p1 (window-point w1))
                 (p2 (window-point w2)))
            (set-window-buffer-start-and-point w1 b2 s2 p2)
            (set-window-buffer-start-and-point w2 b1 s1 p1)))))))

(defun rotate-windows-clockwise ()
  "Rotate windows clockwise"
  (interactive)
  (rotate-windows -1))

(defun rotate-windows-anticlockwise ()
  "Rotate windows clockwise"
  (interactive)
  (rotate-windows 1))
